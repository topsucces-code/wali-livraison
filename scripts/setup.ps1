# Script de configuration automatique pour WALI Livraison
# PowerShell Script pour Windows

Write-Host "üöÄ Configuration de l'environnement WALI Livraison..." -ForegroundColor Green

# V√©rification des pr√©requis
Write-Host "üìã V√©rification des pr√©requis..." -ForegroundColor Yellow

# V√©rifier Node.js
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js d√©tect√©: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js non trouv√©. Veuillez installer Node.js 18+" -ForegroundColor Red
    exit 1
}

# V√©rifier npm
try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm d√©tect√©: $npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm non trouv√©" -ForegroundColor Red
    exit 1
}

# V√©rifier Docker (optionnel)
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker d√©tect√©: $dockerVersion" -ForegroundColor Green
    $dockerAvailable = $true
} catch {
    Write-Host "‚ö†Ô∏è Docker non trouv√©. Les services seront configur√©s manuellement." -ForegroundColor Yellow
    $dockerAvailable = $false
}

# Configuration de l'environnement
Write-Host "üîß Configuration de l'environnement..." -ForegroundColor Yellow

# Copier le fichier .env
if (!(Test-Path ".env")) {
    Copy-Item ".env.example" ".env"
    Write-Host "‚úÖ Fichier .env cr√©√©" -ForegroundColor Green
} else {
    Write-Host "‚ÑπÔ∏è Fichier .env existe d√©j√†" -ForegroundColor Blue
}

# Installation des d√©pendances
Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
Write-Host "‚è≥ Cela peut prendre plusieurs minutes..." -ForegroundColor Blue

# √âtape 1: Installer les outils de base
Write-Host "üîß Installation des outils de base..." -ForegroundColor Blue
try {
    npm install turbo prettier eslint typescript --save-dev
    Write-Host "‚úÖ Outils de base install√©s" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors de l'installation des outils de base" -ForegroundColor Yellow
}

# √âtape 2: Installer les packages partag√©s
Write-Host "üì¶ Installation des packages partag√©s..." -ForegroundColor Blue
try {
    Set-Location "packages/database"
    npm install
    Set-Location "../shared"
    npm install
    Set-Location "../ui"
    npm install
    Set-Location "../.."
    Write-Host "‚úÖ Packages partag√©s install√©s" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors de l'installation des packages partag√©s" -ForegroundColor Yellow
    Set-Location "../.."
}

# √âtape 3: Installer les applications web
Write-Host "üåê Installation des applications web..." -ForegroundColor Blue
try {
    Set-Location "apps/api"
    npm install
    Set-Location "../client-web"
    npm install
    Set-Location "../admin-panel"
    npm install
    Set-Location "../.."
    Write-Host "‚úÖ Applications web install√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors de l'installation des applications web" -ForegroundColor Yellow
    Set-Location "../.."
}

# √âtape 4: Applications mobiles (optionnel)
Write-Host "üì± Installation des applications mobiles (optionnel)..." -ForegroundColor Blue
$installMobile = Read-Host "Installer les applications mobiles React Native ? (y/N)"
if ($installMobile -eq "y" -or $installMobile -eq "Y") {
    try {
        Set-Location "apps/mobile-client"
        npm install --legacy-peer-deps
        Set-Location "../mobile-driver"
        npm install --legacy-peer-deps
        Set-Location "../.."
        Write-Host "‚úÖ Applications mobiles install√©es" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Erreur lors de l'installation des applications mobiles" -ForegroundColor Yellow
        Write-Host "üí° Les applications mobiles peuvent √™tre install√©es plus tard" -ForegroundColor Blue
        Set-Location "../.."
    }
} else {
    Write-Host "‚è≠Ô∏è Applications mobiles ignor√©es (peuvent √™tre install√©es plus tard)" -ForegroundColor Blue
}

# D√©marrage des services Docker (si disponible)
if ($dockerAvailable) {
    Write-Host "üê≥ D√©marrage des services Docker..." -ForegroundColor Yellow
    
    try {
        docker-compose -f docker-compose.dev.yml up -d postgres redis
        Write-Host "‚úÖ Services Docker d√©marr√©s" -ForegroundColor Green
        Start-Sleep -Seconds 5
    } catch {
        Write-Host "‚ö†Ô∏è Erreur Docker. V√©rifiez que Docker Desktop est d√©marr√©." -ForegroundColor Yellow
        $dockerAvailable = $false
    }
}

# Configuration de la base de donn√©es
if ($dockerAvailable) {
    Write-Host "üóÑÔ∏è Configuration de la base de donn√©es..." -ForegroundColor Yellow
    
    try {
        Set-Location "packages/database"
        npm run db:generate
        Write-Host "‚úÖ Client Prisma g√©n√©r√©" -ForegroundColor Green
        
        npm run db:push
        Write-Host "‚úÖ Base de donn√©es configur√©e" -ForegroundColor Green
        
        Set-Location "../.."
    } catch {
        Write-Host "‚ö†Ô∏è Erreur de configuration de la base de donn√©es" -ForegroundColor Yellow
        Set-Location "../.."
    }
}

# R√©sum√© de la configuration
Write-Host "`nüéâ Configuration termin√©e !" -ForegroundColor Green
Write-Host "üìã R√©sum√©:" -ForegroundColor Yellow

if ($dockerAvailable) {
    Write-Host "‚úÖ Services Docker: PostgreSQL et Redis d√©marr√©s" -ForegroundColor Green
    Write-Host "‚úÖ Base de donn√©es: Configur√©e" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Services Docker: Non disponibles" -ForegroundColor Yellow
    Write-Host "üí° Configurez PostgreSQL et Redis manuellement" -ForegroundColor Blue
}

Write-Host "‚úÖ D√©pendances: Install√©es" -ForegroundColor Green
Write-Host "‚úÖ Environnement: Configur√©" -ForegroundColor Green

# Instructions de d√©marrage
Write-Host "`nüöÄ Pour d√©marrer le projet:" -ForegroundColor Cyan
Write-Host "npm run dev" -ForegroundColor White

Write-Host "`nüì± URLs d'acc√®s:" -ForegroundColor Cyan
Write-Host "‚Ä¢ API Backend: http://localhost:3001" -ForegroundColor White
Write-Host "‚Ä¢ Client Web: http://localhost:3000" -ForegroundColor White
Write-Host "‚Ä¢ Admin Panel: http://localhost:3002" -ForegroundColor White
Write-Host "‚Ä¢ Documentation API: http://localhost:3001/api/docs" -ForegroundColor White

if ($dockerAvailable) {
    Write-Host "‚Ä¢ Adminer (DB): http://localhost:8080" -ForegroundColor White
}

Write-Host "`nüìö Documentation:" -ForegroundColor Cyan
Write-Host "‚Ä¢ README.md - Vue d'ensemble" -ForegroundColor White
Write-Host "‚Ä¢ SETUP_STATUS.md - √âtat de la configuration" -ForegroundColor White
Write-Host "‚Ä¢ PLAN_DEVELOPPEMENT.md - Plan d√©taill√©" -ForegroundColor White

Write-Host "`nüéØ Le projet WALI Livraison est pr√™t pour le d√©veloppement !" -ForegroundColor Green
